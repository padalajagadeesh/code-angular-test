{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../image-upload.service\";\nimport * as i2 from \"@angular/common\";\nconst _c0 = [\"videoElement\"];\nconst _c1 = [\"canvasElement\"];\nfunction CameraComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"img\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const image_r3 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", image_r3, i0.ɵɵsanitizeUrl);\n  }\n}\nexport let CameraComponent = /*#__PURE__*/(() => {\n  class CameraComponent {\n    constructor(imageUploadService) {\n      this.imageUploadService = imageUploadService;\n      this.capturedImages = [];\n    }\n    ngOnInit() {\n      // this.intervalId = setInterval(() => {\n      this.startCamera();\n      console.log('pageload');\n      this.capturedImages = JSON.parse(localStorage.getItem('capturedImages') || '[]');\n      // }, 5000);\n    }\n\n    ngOnDestroy() {\n      this.stopCamera();\n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n      }\n    }\n    startCamera() {\n      navigator.mediaDevices.getUserMedia({\n        video: true\n      }).then(stream => {\n        this.stream = stream;\n        this.videoElement.nativeElement.srcObject = stream;\n        // Start capturing images every 5 seconds\n        // this.intervalId = setInterval(() => {\n        this.captureImage();\n        // }, 5000); \n      }).catch(error => {\n        console.error('Error accessing camera:', error);\n      });\n    }\n    stopCamera() {\n      if (this.stream) {\n        const tracks = this.stream.getTracks();\n        tracks.forEach(track => track.stop());\n      }\n    }\n    captureImage() {\n      console.log('captured');\n      const video = this.videoElement.nativeElement;\n      const canvas = this.canvasElement.nativeElement;\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      const context = canvas.getContext('2d');\n      context?.drawImage(video, 0, 0, canvas.width, canvas.height);\n      // Get the image as a data URL and store it in localStorage\n      const imageData = canvas.toDataURL('image/png');\n      const images = JSON.parse(localStorage.getItem('capturedImages') || '[]');\n      images.push(imageData);\n      localStorage.setItem('capturedImages', JSON.stringify(images));\n      this.capturedImages.push(imageData);\n      // Send the image to the backend\n      //  this.imageUploadService.uploadImage(imageData).subscribe({\n      //   next: (response) => {\n      //     console.log('Image uploaded successfully:', response);\n      //   },\n      //   error: (error) => {\n      //     console.error('Error uploading image:', error);\n      //   },\n      // });\n    }\n\n    static {\n      this.ɵfac = function CameraComponent_Factory(t) {\n        return new (t || CameraComponent)(i0.ɵɵdirectiveInject(i1.ImageUploadService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: CameraComponent,\n        selectors: [[\"app-camera\"]],\n        viewQuery: function CameraComponent_Query(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵviewQuery(_c0, 7);\n            i0.ɵɵviewQuery(_c1, 7);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.videoElement = _t.first);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvasElement = _t.first);\n          }\n        },\n        decls: 9,\n        vars: 1,\n        consts: [[1, \"camera-container\"], [\"autoplay\", \"\"], [\"videoElement\", \"\"], [2, \"display\", \"none\"], [\"canvasElement\", \"\"], [1, \"preview\"], [4, \"ngFor\", \"ngForOf\"], [\"alt\", \"Captured Image\", 3, \"src\"]],\n        template: function CameraComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0);\n            i0.ɵɵelement(1, \"video\", 1, 2)(3, \"canvas\", 3, 4);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(5, \"div\", 5)(6, \"h3\");\n            i0.ɵɵtext(7, \"Captured Images:\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(8, CameraComponent_div_8_Template, 2, 1, \"div\", 6);\n            i0.ɵɵelementEnd();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(8);\n            i0.ɵɵproperty(\"ngForOf\", ctx.capturedImages);\n          }\n        },\n        dependencies: [i2.NgForOf],\n        styles: [\".camera-container[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center;flex-direction:column;margin-top:20px}video[_ngcontent-%COMP%]{width:100%;max-width:500px;border:2px solid #ccc;border-radius:5px}canvas[_ngcontent-%COMP%]{display:none}\"]\n      });\n    }\n  }\n  return CameraComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}